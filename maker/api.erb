<% if date_flag %>use chrono::prelude::*;
<% end %><% if fields.present? %>use crate::fields::{<% fields.each do |it| %><%= it %>::<%= it.ucc %>, <% end %>};
<% end %><% if enum_flag %>use itertools::Itertools;
use std::collections::HashSet;
<% end %><% if body_flag %>use serde::{Serialize, Deserialize};
<% end %>use reqwest::RequestBuilder;
use super::{TwitterResult, execute_twitter};

const URL: &str = "<%= yml[:url] %>";

<% if bodies.present? %><%= bodies.join("\n\n") %><% end %>

<%= expantions.join("\n\n") %>
#[derive(Debug, Default)]
pub struct Api {<% (yml[:queries] + paths).each do |it| %>
    <%= it[:name].make_field %>: <%= make_type(it) %>,<% end %>
}

impl Api {
    pub fn new(<%= required.map{|it| "#{it[:name].make_field}: #{make_new_type(it)}"}.join(", ") %>) -> Self {
        Self {<% required.each do |it| %>
            <%= required_new(it) %>,<% end %>
            ..Default::default()
        }
    }
    <% others.each do |it| %>
    pub fn <%= it[:name].make_field %>(mut self, value: <%= make_field_type(it) %>) -> Self {
        self.<%= it[:name].make_field %> = Some(value<%= it[:type] == "string" ? ".to_owned()" : "" %>);
        self
    }
    <% end %>

    pub fn build(self<%= bodies.present? ? ", body: &Body" : "" %>, bearer_code: &str) -> RequestBuilder {
        let mut query_parameters = vec![];<% required_queries.each do |it| %>
        query_parameters.push(("<%= it[:name].make_field %>", self.<%= it[:name].make_field %><%= make_query_value(it) %>));<% end %><% others_queries.each do |it| %>
        if let Some(<%= it[:name].make_field %>) = self.<%= it[:name].make_field %> {
            query_parameters.push(("<%= it[:name].make_field %>", <%= it[:name].make_field %><%= make_query_value(it) %>));
        }<% end %>
        let client = reqwest::Client::new();
        client
            .<%= yml[:method] %>(URL<%= path_parameters.join("") %>)
            .query(&query_parameters)
            .bearer_auth(bearer_code)<% if bodies.present? %>
            .json(&serde_json::to_value(body).unwrap())<% end %>
    }

    pub async fn execute(self<%= bodies.present? ? ", body: &Body" : "" %>, bearer_code: &str) -> TwitterResult {
        execute_twitter(self.build(<%= bodies.present? ? "body, " : "" %>bearer_code)).await
    }
}